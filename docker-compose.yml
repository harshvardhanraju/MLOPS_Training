version: '3.8'

services:
  # Main MLOps API
  api:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./mlflow.db:/app/mlflow.db
      - ./mlartifacts:/app/mlartifacts
    environment:
      - PYTHONPATH=/app
      - MLFLOW_TRACKING_URI=sqlite:///mlflow.db
    depends_on:
      - mlflow
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: docker/mlflow.Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow.db:/mlflow/mlflow.db
      - ./mlartifacts:/mlflow/mlartifacts
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/mlartifacts
    networks:
      - mlops-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:9.0.0
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.4.0
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mlops-network
    restart: unless-stopped

  # Data drift detection service
  drift-detection:
    build: .
    command: python monitoring/drift_detection.py
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./monitoring:/app/monitoring
    environment:
      - PYTHONPATH=/app
    depends_on:
      - api
    networks:
      - mlops-network
    restart: unless-stopped

  # Jupyter Notebook for exploration
  jupyter:
    build: .
    command: jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
    ports:
      - "8888:8888"
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - PYTHONPATH=/app
    networks:
      - mlops-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:

networks:
  mlops-network:
    driver: bridge